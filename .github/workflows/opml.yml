# This action creates an opml file with all the user starred repositories releases tags
name: OPML generator

on:
  # Triggers when pushing to the main branch
  push:
    branches:
      - main

  # Run this workflow manually from the Actions tab
  workflow_dispatch:

  # run automatically each day
  schedule:
    - cron: 0 0 * * *

# Cancel running actions if new commits are added
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# parameters
env:
  USER: ${{ github.actor }}
  LIST: "RSS Releases"
  TAG: rss_releases

permissions:
  contents: write # needed to update tag and release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repository files
        uses: actions/checkout@v4

      - name: Generate dynamic variables
        run: |
          echo "FILE=${USER}_starred_${LIST//[^A-Za-z0-9._-]/_}_releases.opml" >> $GITHUB_ENV
    
      - name: Create file ${{ env.FILE }} for user ${{ env.user }}
        run: |
          
          echo "::group::Generate query"
          
          QUERY=$(
          cat <<END | jq --null-input --raw-input --slurp '{query:input}'
          {
            user(login: "$USER") {
              lists(first: 100) {
                nodes {
                  name
                  items(first: 100) {
                    nodes {
                      ... on Repository {
                        name
                        url
                      }
                    }
                  }
                }
              }
            }
          }
          END
          )
          
          echo "$QUERY"
          echo "::endgroup::"

          
          echo "::group::Get response"
          
          RESPONSE=$(curl --header 'Content-Type: application/json' --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --data "$QUERY" https://api.github.com/graphql)
          echo "$RESPONSE"
          echo "::endgroup::"
          
          echo "::group::File: $FILE"
          echo "$RESPONSE" | jq -r '
          "<opml version=\"1.0\">
              <head>
                  <title>'"$USER's starred ($LIST) repositories' releases"'</title>
              </head>
              <body>
          \( [.data.user.lists.nodes[] | select(.name=="'"$LIST"'").items.nodes[] | "        <outline type=\"rss\" text=\"\(.name)\" xmlUrl=\"\(.url)/releases.atom\"/>"] | join("\n") )
              </body>
          </opml>"
          ' > $FILE
          
          cat $FILE
          echo "::endgroup::"

      - name: Update ${{ env.TAG }} tag to current commit
        run: |
          git tag --force $TAG
          git push --force origin tag $TAG

      - name: Upload ${{ env.FILE }} to ${{ env.TAG }} release
        run: |
          gh release create $TAG -t "RSS releases file" -n "$USER's starred ($LIST) repositories' releases" || true
          gh release upload $TAG $FILE --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
